{"version":3,"file":"static/js/12.a6e14959.chunk.js","mappings":"mJAUA,IARqB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACtB,OAAO,gBAAIC,UAAU,UAAd,oBAAgCD,IACxC,C,uJCHD,EAA2B,2B,SCgC3B,EA7BiB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KAClB,OACE,eAAID,UAAWE,EAAf,SACGD,EAAKE,KAAI,SAAAC,GACR,OACE,2BACE,gBAAKC,IAAKD,EAAME,OAAQC,IAAKH,EAAMI,QACnC,4BACE,wBAAKJ,EAAMI,QACX,uCAAeJ,EAAMK,kBAJhBL,EAAMM,GAQlB,KAGN,E,oBCyCD,EApDa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,sGAEnBJ,GAAa,GAFM,UAIKK,EAAAA,EAAAA,IAAaV,GAJlB,OAIbW,EAJa,OAKbC,EAAoBD,EAAUnB,KAClC,gBAAGK,EAAH,EAAGA,KAAMgB,EAAT,EAASA,aAAcf,EAAvB,EAAuBA,UAAvB,MAA4C,CAC1CD,KAAAA,EACAE,GAFF,EAAkCA,GAGhCD,UAAAA,EACAH,QAAQmB,EAAAA,EAAAA,GAAUD,GAJpB,IAQFV,EAAQS,GAdW,gDAgBnBL,EAAS,KAAMnB,SAhBI,yBAkBnBiB,GAAa,GAlBM,4EAAH,qDAsBpBI,GACD,GAAE,CAACT,IAEAM,GACK,SAACS,EAAA,EAAD,CAAc3B,QAASkB,IAG5BF,GACK,SAACY,EAAA,EAAD,KAIP,8BACmB,IAAhB1B,EAAK2B,QACJ,6DAEA,SAAC,EAAD,CAAU3B,KAAMA,KAIvB,C,uDC3DM,IAAMwB,EAAY,SAAAI,GACvB,OAAiB,OAAbA,QAAkCC,IAAbD,EACjB,kCAAN,OAAyCA,GAElC,2DAEV,C,mMCJDE,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAe,mCAAG,WAAOC,EAAOC,GAAd,uFACNJ,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBE,GAC1C,CAAEC,OAAQA,IAHiB,cACvBC,EADuB,yBAKtBA,EAASC,MALa,2CAAH,wDAQfC,EAAiB,mCAAG,oGACRP,EAAAA,EAAAA,IAAA,qCAAwCC,IADhC,cACzBI,EADyB,yBAExBA,EAASC,KAAKE,SAFU,2CAAH,qDAKjBC,EAAY,mCAAG,WAAM9B,GAAN,uFACHqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,oBAAkCsB,IAD/B,cACpBI,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZhB,EAAY,mCAAG,WAAMX,GAAN,uFACHqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,4BAA0CsB,IADvC,cACpBI,EADoB,yBAEnBA,EAASC,KAAKpC,MAFK,2CAAH,sDAKZwC,EAAe,mCAAG,WAAM/B,GAAN,uFACNqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,4BAA0CsB,IADpC,cACvBI,EADuB,yBAEtBA,EAASC,KAAKE,SAFQ,2CAAH,qD","sources":["components/ErrorMessage.jsx","webpack://goit-react-hw-05-movies/./src/components/CastList/CastList.module.css?59ac","components/CastList/CastList.jsx","pages/Cast/Cast.jsx","utils/getImgUrl.js","utils/movieApi.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ message }) => {\n  return <h3 className=\"message\">Error: {message}</h3>;\n};\n\nErrorMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"CastList_castList__YQOUt\"};","import PropTypes from 'prop-types';\n\nimport styles from './CastList.module.css';\n\nconst CastList = ({ cast }) => {\n  return (\n    <ul className={styles.castList}>\n      {cast.map(actor => {\n        return (\n          <li key={actor.id}>\n            <img src={actor.imgUrl} alt={actor.name} />\n            <div>\n              <h4>{actor.name}</h4>\n              <p>Character: {actor.character}</p>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      imgUrl: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCast } from 'utils/movieApi';\nimport { getImgUrl } from 'utils/getImgUrl';\nimport CastList from 'components/CastList/CastList';\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const ferchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n\n        const movieCast = await getMovieCast(movieId);\n        const formatedMovieCast = movieCast.map(\n          ({ name, profile_path, character, id }) => ({\n            name,\n            id,\n            character,\n            imgUrl: getImgUrl(profile_path),\n          })\n        );\n\n        setCast(formatedMovieCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    ferchMovieCast();\n  }, [movieId]);\n\n  if (error) {\n    return <ErrorMessage message={error} />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>Unfortunately no cast was found.</p>\n      ) : (\n        <CastList cast={cast} />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","export const getImgUrl = imageUrl => {\n  if (imageUrl !== null && imageUrl !== undefined) {\n    return `https://image.tmdb.org/t/p/w300${imageUrl}`;\n  } else {\n    return 'https://img.icons8.com/pastel-glyph/512/film-reel--v2.png';\n  }\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9f418ce48484288694da4da227268766';\n\nexport const getMovieByQuery = async (query, signal) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`,\n    { signal: signal }\n  );\n  return response.data;\n};\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data.results;\n};\n"],"names":["message","className","cast","styles","map","actor","src","imgUrl","alt","name","character","id","movieId","useParams","useState","setCast","isLoading","setIsLoading","error","setError","useEffect","ferchMovieCast","getMovieCast","movieCast","formatedMovieCast","profile_path","getImgUrl","ErrorMessage","Loader","length","imageUrl","undefined","axios","API_KEY","getMovieByQuery","query","signal","response","data","getTrendingMovies","results","getMovieById","getMovieReviews"],"sourceRoot":""}