{"version":3,"file":"static/js/600.05149769.chunk.js","mappings":"uQACA,EAA8B,gC,SC+B9B,EA3BmB,SAAC,GAAoB,IAAlBA,EAAiB,EAAjBA,WAapB,OACE,kBAAMC,UAAWC,EAAoBC,SAblB,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAcF,EAAEG,OAAOC,SAASC,MAAMC,MAEjB,KAAvBJ,EAAYK,SAIhBX,EAAWM,GACXF,EAAEG,OAAOK,QACV,EAGC,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,aAAa,MAAMC,UAAQ,KAC3D,6BACE,SAAC,MAAD,QAIP,E,SC8CD,EAjEe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAOX,EAAP,KAAoBgB,EAApB,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,yFACxBL,GAAa,GAEc,KAAvBf,EAAYK,OAHQ,uBAItBU,GAAa,GAJS,2CAQHM,EAAAA,EAAAA,IAAgBrB,GARb,OAQlBY,EARkB,OAUlBU,EAAiBV,EAAOW,QAAQC,KACpC,kBAA6D,CAC3DC,GADF,EAAGA,GAEDC,MAFF,EAAOA,MAGLC,YAHF,EAAcA,YAIZC,aAJF,EAA2BA,aAKzBC,aALF,EAAyCA,aAAzC,IASFhB,EAAUS,GAEVP,GAAa,GAtBW,4CAAH,qDAyBvBK,GACD,GAAE,CAACpB,IAWJ,OACE,4BACE,SAAC,EAAD,CAAYN,WAXY,SAAAS,GACtBH,IAAgBG,IAIpBa,EAAeb,GACfU,EAAU,IACX,IAKIC,IAAa,SAACgB,EAAA,EAAD,KACZhB,GAA+B,IAAlBF,EAAOmB,QAAgB/B,IAAe,uCACnDc,GAAaF,EAAOmB,OAAS,IAC7B,wBACGnB,EAAOY,KAAI,SAAAQ,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAMP,IAAMS,MAAO,CAAEC,KAAMlB,GAAhD,SACGe,EAAMN,SAFFM,EAAMP,GADA,QAW1B,C","sources":["webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formWrapper\":\"SearchForm_formWrapper__hZioc\"};","import PropTypes from 'prop-types';\nimport { BiSearchAlt } from 'react-icons/bi';\n\nimport styles from './SearchForm.module.css';\n\nconst SearchForm = ({ showMovies }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchQuery = e.target.elements.query.value;\n\n    if (searchQuery.trim() === '') {\n      return;\n    }\n\n    showMovies(searchQuery);\n    e.target.reset();\n  };\n\n  return (\n    <form className={styles.formWrapper} onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"query\" autoComplete=\"off\" required />\n      <button>\n        <BiSearchAlt />\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  showMovies: PropTypes.func,\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { getMovieByQuery } from 'utils/movieApi';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchSearchMovies = async () => {\n      setIsLoading(true);\n\n      if (searchQuery.trim() === '') {\n        setIsLoading(false);\n        return;\n      }\n\n      const movies = await getMovieByQuery(searchQuery);\n\n      const modifaedMovies = movies.results.map(\n        ({ id, title, poster_path, vote_average, release_date }) => ({\n          id,\n          title,\n          poster_path,\n          vote_average,\n          release_date,\n        })\n      );\n\n      setMovies(modifaedMovies);\n\n      setIsLoading(false);\n    };\n\n    fetchSearchMovies();\n  }, [searchQuery]);\n\n  const searchMoviesHandler = query => {\n    if (searchQuery === query) {\n      return;\n    }\n\n    setSearchQuery(query);\n    setMovies([]);\n  };\n\n  return (\n    <div>\n      <SearchForm showMovies={searchMoviesHandler} />\n      {isLoading && <Loader />}\n      {!isLoading && movies.length === 0 && searchQuery && <p>Not found!</p>}\n      {!isLoading && movies.length > 0 && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["showMovies","className","styles","onSubmit","e","preventDefault","searchQuery","target","elements","query","value","trim","reset","type","name","autoComplete","required","useState","movies","setMovies","isLoading","setIsLoading","setSearchQuery","location","useLocation","useEffect","fetchSearchMovies","getMovieByQuery","modifaedMovies","results","map","id","title","poster_path","vote_average","release_date","Loader","length","movie","to","state","from"],"sourceRoot":""}